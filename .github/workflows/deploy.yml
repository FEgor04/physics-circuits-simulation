name: Deploy
on:
  release:
    types: [published]

jobs:
  frontend:
    name: Build & Push Docker image for frontend
    defaults:
      run:
        working-directory: ./frontend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        run: docker login ${{ secrets.REGISTRY_URI }} -u ${{ secrets.REGISTRY_KEYID }} -p ${{ secrets.REGISTRY_KEY_SECRET }}
      - name: Build Docker Image
        run: docker build --tag ${{ secrets.REGISTRY_URI }}/frontend:${{ github.event.release.tag_name }} .
      - name: Push Docker Image to Registry
        run: docker push ${{ secrets.REGISTRY_URI  }}/frontend:${{ github.event.release.tag_name}}

  backend:
    defaults:
      run:
        working-directory: ./backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        run: docker login ${{ secrets.REGISTRY_URI }} -u ${{ secrets.REGISTRY_KEYID }} -p ${{ secrets.REGISTRY_KEY_SECRET }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew bootBuildImage --imageName=${{ secrets.REGISTRY_URI }}/backend:${{ github.event.release.tag_name }}
      - name: Push Docker Image to Registry
        run: docker push ${{ secrets.REGISTRY_URI  }}/backend:${{ github.event.release.tag_name }}

  deploy:
    needs: [frontend, backend]
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: SSH to server, clone from git and re-deploy docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_DIRECTORY }}
            docker login ${{ secrets.REGISTRY_URI }} -u ${{ secrets.REGISTRY_KEYID }} -p ${{ secrets.REGISTRY_KEY_SECRET }}
            git checkout main
            git pull
            git checkout ${{ github.event.release.tag_name }}
            echo "VERSION=${{ github.event.release.tag_name }}" > .env
            echo "REGISTRY=${{ secrets.REGISTRY_URI }}" >> .env
            docker compose -f traefik.docker-compose.yaml pull
            docker compose -f traefik.docker-compose.yaml up -d
