/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * Physics circuits simulation Engine
 * Sample API of the Physics project engine
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { GetUserResponse, GetUsersPermissionsResponse, JwtResponse, SchemeResponse } from "./index.schemas";

export const getGetSchemeByIdResponseMock = (overrideResponse: any = {}): SchemeResponse => ({
  authorName: faker.word.sample(),
  canEdit: faker.datatype.boolean(),
  components: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      a: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      b: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      componentId: faker.number.int({ min: undefined, max: undefined }),
      emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      type: faker.helpers.arrayElement(["WIRE", "RESISTOR", "SOURCE", "SOURCE_DC", "VOLTMETER", "AMPERMETER"] as const),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateSchemeResponseMock = (): string => faker.word.sample();

export const getSetPermissionsByIdSchemeResponseMock = (): string => faker.word.sample();

export const getDeletePermissionsByIdSchemeResponseMock = (): string => faker.word.sample();

export const getGetAllSchemesResponseMock = (overrideResponse: any = {}): SchemeResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    authorName: faker.word.sample(),
    canEdit: faker.datatype.boolean(),
    components: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        a: {
          x: faker.number.int({ min: undefined, max: undefined }),
          y: faker.number.int({ min: undefined, max: undefined }),
          ...overrideResponse,
        },
        b: {
          x: faker.number.int({ min: undefined, max: undefined }),
          y: faker.number.int({ min: undefined, max: undefined }),
          ...overrideResponse,
        },
        componentId: faker.number.int({ min: undefined, max: undefined }),
        emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        type: faker.helpers.arrayElement([
          "WIRE",
          "RESISTOR",
          "SOURCE",
          "SOURCE_DC",
          "VOLTMETER",
          "AMPERMETER",
        ] as const),
        ...overrideResponse,
      })),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    ...overrideResponse,
  }));

export const getCreateNewSchemeResponseMock = (overrideResponse: any = {}): SchemeResponse => ({
  authorName: faker.word.sample(),
  canEdit: faker.datatype.boolean(),
  components: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      a: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      b: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      componentId: faker.number.int({ min: undefined, max: undefined }),
      emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      type: faker.helpers.arrayElement(["WIRE", "RESISTOR", "SOURCE", "SOURCE_DC", "VOLTMETER", "AMPERMETER"] as const),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getRegisterResponseMock = (overrideResponse: any = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getRegisterAdminResponseMock = (overrideResponse: any = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getRefreshResponseMock = (overrideResponse: any = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getLoginResponseMock = (overrideResponse: any = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getGetUserByIdResponseMock = (overrideResponse: any = {}): GetUserResponse => ({
  email: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetCurrentUserResponseMock = (overrideResponse: any = {}): GetUserResponse => ({
  email: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetAllUsersBySchemeIdResponseMock = (overrideResponse: any = {}): GetUsersPermissionsResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    permission: faker.helpers.arrayElement(["EDIT", "VIEW"] as const),
    username: faker.word.sample(),
    ...overrideResponse,
  }));

export const getGetSchemeByIdMockHandler = (overrideResponse?: SchemeResponse) => {
  return http.get("*/api/schemes/:id", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetSchemeByIdResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getUpdateSchemeMockHandler = (overrideResponse?: string) => {
  return http.put("*/api/schemes/:id", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateSchemeResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getSetPermissionsByIdSchemeMockHandler = (overrideResponse?: string) => {
  return http.put("*/api/schemes/:id/permissions", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getSetPermissionsByIdSchemeResponseMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeletePermissionsByIdSchemeMockHandler = (overrideResponse?: string) => {
  return http.delete("*/api/schemes/:id/permissions", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getDeletePermissionsByIdSchemeResponseMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAllSchemesMockHandler = (overrideResponse?: SchemeResponse[]) => {
  return http.get("*/api/schemes", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetAllSchemesResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getCreateNewSchemeMockHandler = (overrideResponse?: SchemeResponse) => {
  return http.post("*/api/schemes", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCreateNewSchemeResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getRegisterMockHandler = (overrideResponse?: JwtResponse) => {
  return http.post("*/api/auth/register", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getRegisterResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getRegisterAdminMockHandler = (overrideResponse?: JwtResponse) => {
  return http.post("*/api/auth/register/admin", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getRegisterAdminResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getRefreshMockHandler = (overrideResponse?: JwtResponse) => {
  return http.post("*/api/auth/refresh", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getRefreshResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getLoginMockHandler = (overrideResponse?: JwtResponse) => {
  return http.post("*/api/auth/login", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getLoginResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getGetUserByIdMockHandler = (overrideResponse?: GetUserResponse) => {
  return http.get("*/api/users/:id", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetUserByIdResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getGetCurrentUserMockHandler = (overrideResponse?: GetUserResponse) => {
  return http.get("*/api/users/me", async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetCurrentUserResponseMock()), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getGetAllUsersBySchemeIdMockHandler = (overrideResponse?: GetUsersPermissionsResponse[]) => {
  return http.get("*/api/schemes/:id/users", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getGetAllUsersBySchemeIdResponseMock()),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getPhysicsCircuitsSimulationEngineMock = () => [
  getGetSchemeByIdMockHandler(),
  getUpdateSchemeMockHandler(),
  getSetPermissionsByIdSchemeMockHandler(),
  getDeletePermissionsByIdSchemeMockHandler(),
  getGetAllSchemesMockHandler(),
  getCreateNewSchemeMockHandler(),
  getRegisterMockHandler(),
  getRegisterAdminMockHandler(),
  getRefreshMockHandler(),
  getLoginMockHandler(),
  getGetUserByIdMockHandler(),
  getGetCurrentUserMockHandler(),
  getGetAllUsersBySchemeIdMockHandler(),
];
