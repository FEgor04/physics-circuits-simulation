/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Physics circuits simulation Engine
 * Sample API of the Physics project engine
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  GetAllUsersPermissions,
  GetUserResponse,
  GetUsersPermissionsResponse,
  JwtResponse,
  Message,
  SchemeResponse,
} from "./index.schemas";

export const getGetSchemeByIdResponseMock = (overrideResponse: Partial<SchemeResponse> = {}): SchemeResponse => ({
  authorName: faker.word.sample(),
  canEdit: faker.datatype.boolean(),
  components: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      a: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
      },
      b: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
      },
      componentId: faker.number.int({ min: undefined, max: undefined }),
      emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      type: faker.helpers.arrayElement(["WIRE", "RESISTOR", "SOURCE", "SOURCE_DC", "VOLTMETER", "AMPERMETER"] as const),
    })),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  isEmbedded: faker.datatype.boolean(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateSchemeResponseMock = (): string => faker.word.sample();

export const getDeleteSchemeByIdResponseMock = (): string => faker.word.sample();

export const getGetAllUsersPermissionsBySchemeIdResponseMock = (
  overrideResponse: Partial<GetAllUsersPermissions> = {},
): GetAllUsersPermissions => ({
  permissions: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      email: faker.word.sample(),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      permission: faker.helpers.arrayElement(["EDIT", "VIEW"] as const),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSetPermissionsByIdSchemeResponseMock = (): string => faker.word.sample();

export const getDeletePermissionsByIdSchemeResponseMock = (): string => faker.word.sample();

export const getGetAllSchemesResponseMock = (): SchemeResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    authorName: faker.word.sample(),
    canEdit: faker.datatype.boolean(),
    components: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        a: {
          x: faker.number.int({ min: undefined, max: undefined }),
          y: faker.number.int({ min: undefined, max: undefined }),
        },
        b: {
          x: faker.number.int({ min: undefined, max: undefined }),
          y: faker.number.int({ min: undefined, max: undefined }),
        },
        componentId: faker.number.int({ min: undefined, max: undefined }),
        emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        type: faker.helpers.arrayElement([
          "WIRE",
          "RESISTOR",
          "SOURCE",
          "SOURCE_DC",
          "VOLTMETER",
          "AMPERMETER",
        ] as const),
      })),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    isEmbedded: faker.datatype.boolean(),
    name: faker.word.sample(),
  }));

export const getCreateNewSchemeResponseMock = (overrideResponse: Partial<SchemeResponse> = {}): SchemeResponse => ({
  authorName: faker.word.sample(),
  canEdit: faker.datatype.boolean(),
  components: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      a: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
      },
      b: {
        x: faker.number.int({ min: undefined, max: undefined }),
        y: faker.number.int({ min: undefined, max: undefined }),
      },
      componentId: faker.number.int({ min: undefined, max: undefined }),
      emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      type: faker.helpers.arrayElement(["WIRE", "RESISTOR", "SOURCE", "SOURCE_DC", "VOLTMETER", "AMPERMETER"] as const),
    })),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  isEmbedded: faker.datatype.boolean(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getRegisterResponseMock = (overrideResponse: Partial<JwtResponse> = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getRegisterAdminResponseMock = (overrideResponse: Partial<JwtResponse> = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getRefreshResponseMock = (overrideResponse: Partial<JwtResponse> = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getLoginResponseMock = (overrideResponse: Partial<JwtResponse> = {}): JwtResponse => ({
  accessToken: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  refreshToken: faker.word.sample(),
  username: faker.word.sample(),
  ...overrideResponse,
});

export const getGetUserByIdResponseMock = (overrideResponse: Partial<GetUserResponse> = {}): GetUserResponse => ({
  email: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetCurrentUserResponseMock = (overrideResponse: Partial<GetUserResponse> = {}): GetUserResponse => ({
  email: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetAllUsersBySchemeIdResponseMock = (): GetUsersPermissionsResponse[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    permission: faker.helpers.arrayElement(["EDIT", "VIEW"] as const),
    username: faker.word.sample(),
  }));

export const getDoNothingResponseMock = (overrideResponse: Partial<Message> = {}): Message => ({
  event: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        components: faker.helpers.arrayElement([
          Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            a: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            b: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            componentId: faker.number.int({ min: undefined, max: undefined }),
            emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            type: faker.helpers.arrayElement([
              "WIRE",
              "RESISTOR",
              "SOURCE",
              "SOURCE_DC",
              "VOLTMETER",
              "AMPERMETER",
            ] as const),
          })),
          undefined,
        ]),
        type: faker.helpers.arrayElement(["DELETE"] as const),
      },
      {
        components: faker.helpers.arrayElement([
          Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            a: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            b: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            componentId: faker.number.int({ min: undefined, max: undefined }),
            emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            type: faker.helpers.arrayElement([
              "WIRE",
              "RESISTOR",
              "SOURCE",
              "SOURCE_DC",
              "VOLTMETER",
              "AMPERMETER",
            ] as const),
          })),
          undefined,
        ]),
        type: faker.helpers.arrayElement(["UPDATE"] as const),
      },
      {
        components: faker.helpers.arrayElement([
          Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            a: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            b: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            componentId: faker.number.int({ min: undefined, max: undefined }),
            emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            type: faker.helpers.arrayElement([
              "WIRE",
              "RESISTOR",
              "SOURCE",
              "SOURCE_DC",
              "VOLTMETER",
              "AMPERMETER",
            ] as const),
          })),
          undefined,
        ]),
        type: faker.helpers.arrayElement(["SELECT"] as const),
      },
      {
        schemeId: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        type: faker.helpers.arrayElement(["CONNECT"] as const),
        userDto: faker.helpers.arrayElement([
          {
            email: faker.word.sample(),
            id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.word.sample(),
            password: faker.word.sample(),
          },
          undefined,
        ]),
      },
      {
        type: faker.helpers.arrayElement(["DISCONNECT"] as const),
        userDto: faker.helpers.arrayElement([
          {
            email: faker.word.sample(),
            id: faker.number.int({ min: undefined, max: undefined }),
            name: faker.word.sample(),
            password: faker.word.sample(),
          },
          undefined,
        ]),
      },
      {
        components: faker.helpers.arrayElement([
          Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
            a: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            b: {
              x: faker.number.int({ min: undefined, max: undefined }),
              y: faker.number.int({ min: undefined, max: undefined }),
            },
            componentId: faker.number.int({ min: undefined, max: undefined }),
            emf: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            resistance: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
            type: faker.helpers.arrayElement([
              "WIRE",
              "RESISTOR",
              "SOURCE",
              "SOURCE_DC",
              "VOLTMETER",
              "AMPERMETER",
            ] as const),
          })),
          undefined,
        ]),
        type: faker.helpers.arrayElement(["ADD"] as const),
      },
    ]),
    undefined,
  ]),
  schemeId: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  userId: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  ...overrideResponse,
});

export const getGetSchemeByIdMockHandler = (
  overrideResponse?: SchemeResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => SchemeResponse),
) => {
  return http.get("*/api/schemes/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetSchemeByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getUpdateSchemeMockHandler = (
  overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => string),
) => {
  return http.put("*/api/schemes/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getUpdateSchemeResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteSchemeByIdMockHandler = (
  overrideResponse?: string | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => string),
) => {
  return http.delete("*/api/schemes/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getDeleteSchemeByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAllUsersPermissionsBySchemeIdMockHandler = (
  overrideResponse?:
    | GetAllUsersPermissions
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => GetAllUsersPermissions),
) => {
  return http.get("*/api/schemes/:id/permissions", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetAllUsersPermissionsBySchemeIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getSetPermissionsByIdSchemeMockHandler = (
  overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => string),
) => {
  return http.put("*/api/schemes/:id/permissions", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getSetPermissionsByIdSchemeResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeletePermissionsByIdSchemeMockHandler = (
  overrideResponse?: string | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => string),
) => {
  return http.delete("*/api/schemes/:id/permissions", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getDeletePermissionsByIdSchemeResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAllSchemesMockHandler = (
  overrideResponse?: SchemeResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => SchemeResponse[]),
) => {
  return http.get("*/api/schemes", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetAllSchemesResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getCreateNewSchemeMockHandler = (
  overrideResponse?: SchemeResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => SchemeResponse),
) => {
  return http.post("*/api/schemes", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getCreateNewSchemeResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getRegisterMockHandler = (
  overrideResponse?: JwtResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => JwtResponse),
) => {
  return http.post("*/api/auth/register", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getRegisterResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getRegisterAdminMockHandler = (
  overrideResponse?: JwtResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => JwtResponse),
) => {
  return http.post("*/api/auth/register/admin", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getRegisterAdminResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getRefreshMockHandler = (
  overrideResponse?: JwtResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => JwtResponse),
) => {
  return http.post("*/api/auth/refresh", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getRefreshResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getLoginMockHandler = (
  overrideResponse?: JwtResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => JwtResponse),
) => {
  return http.post("*/api/auth/login", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getLoginResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetUserByIdMockHandler = (
  overrideResponse?: GetUserResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => GetUserResponse),
) => {
  return http.get("*/api/users/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetUserByIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetCurrentUserMockHandler = (
  overrideResponse?: GetUserResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => GetUserResponse),
) => {
  return http.get("*/api/users/me", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetCurrentUserResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAllUsersBySchemeIdMockHandler = (
  overrideResponse?:
    | GetUsersPermissionsResponse[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => GetUsersPermissionsResponse[]),
) => {
  return http.get("*/api/schemes/:id/users", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getGetAllUsersBySchemeIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDoNothingMockHandler = (
  overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Message),
) => {
  return http.get("*/api/rSocket", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? overrideResponse(info)
            : overrideResponse
          : getDoNothingResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getPhysicsCircuitsSimulationEngineMock = () => [
  getGetSchemeByIdMockHandler(),
  getUpdateSchemeMockHandler(),
  getDeleteSchemeByIdMockHandler(),
  getGetAllUsersPermissionsBySchemeIdMockHandler(),
  getSetPermissionsByIdSchemeMockHandler(),
  getDeletePermissionsByIdSchemeMockHandler(),
  getGetAllSchemesMockHandler(),
  getCreateNewSchemeMockHandler(),
  getRegisterMockHandler(),
  getRegisterAdminMockHandler(),
  getRefreshMockHandler(),
  getLoginMockHandler(),
  getGetUserByIdMockHandler(),
  getGetCurrentUserMockHandler(),
  getGetAllUsersBySchemeIdMockHandler(),
  getDoNothingMockHandler(),
];
