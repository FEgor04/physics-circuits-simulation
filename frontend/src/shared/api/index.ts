/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Physics circuits simulation Engine
 * Sample API of the Physics project engine
 * OpenAPI spec version: 1.0.0
 */
import type {
  DeletePermissionsRequest,
  GetAllUsersPermissions,
  GetUserResponse,
  GetUsersPermissionsResponse,
  JwtResponse,
  SchemeCreateRequest,
  SchemeResponse,
  SchemeUpdateRequest,
  SetPermissionsRequest,
  SignInRequest,
  SignUpAdminRequest,
  SignUpRequest,
} from "./index.schemas";
import { customInstance } from "./instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getSchemeById = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<SchemeResponse>({ url: `/api/schemes/${id}`, method: "GET" }, options);
};

export const updateScheme = (
  id: number,
  schemeUpdateRequest: SchemeUpdateRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/api/schemes/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: schemeUpdateRequest,
    },
    options,
  );
};

export const deleteSchemeById = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<string>({ url: `/api/schemes/${id}`, method: "DELETE" }, options);
};

export const getAllUsersPermissionsBySchemeId = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetAllUsersPermissions>({ url: `/api/schemes/${id}/permissions`, method: "GET" }, options);
};

export const setPermissionsByIdScheme = (
  id: number,
  setPermissionsRequest: SetPermissionsRequest[],
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/api/schemes/${id}/permissions`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: setPermissionsRequest,
    },
    options,
  );
};

export const deletePermissionsByIdScheme = (
  id: number,
  deletePermissionsRequest: DeletePermissionsRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/api/schemes/${id}/permissions`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deletePermissionsRequest,
    },
    options,
  );
};

export const getAllSchemes = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<SchemeResponse[]>({ url: `/api/schemes`, method: "GET" }, options);
};

export const createNewScheme = (
  schemeCreateRequest: SchemeCreateRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<SchemeResponse>(
    { url: `/api/schemes`, method: "POST", headers: { "Content-Type": "application/json" }, data: schemeCreateRequest },
    options,
  );
};

/**
 * Registers a new user with provided details and generates JWT token
 * @summary User registration
 */
export const register = (signUpRequest: SignUpRequest, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<JwtResponse>(
    { url: `/api/auth/register`, method: "POST", headers: { "Content-Type": "application/json" }, data: signUpRequest },
    options,
  );
};

/**
 * Registers a new administrator with provided details and admin key, and generates JWT token
 * @summary Admin registration
 */
export const registerAdmin = (
  signUpAdminRequest: SignUpAdminRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<JwtResponse>(
    {
      url: `/api/auth/register/admin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpAdminRequest,
    },
    options,
  );
};

/**
 * Refreshes JWT token based on provided refresh token
 * @summary Refresh token
 */
export const refresh = (refreshBody: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<JwtResponse>(
    { url: `/api/auth/refresh`, method: "POST", headers: { "Content-Type": "application/json" }, data: refreshBody },
    options,
  );
};

/**
 * Authenticates user based on provided credentials and generates JWT token
 * @summary User login
 */
export const login = (signInRequest: SignInRequest, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<JwtResponse>(
    { url: `/api/auth/login`, method: "POST", headers: { "Content-Type": "application/json" }, data: signInRequest },
    options,
  );
};

/**
 * Retrieves user information by their ID
 * @summary Get user by ID
 */
export const getUserById = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetUserResponse>({ url: `/api/users/${id}`, method: "GET" }, options);
};

/**
 * Retrieves information about the current user based on the email stored in the JWT payload
 * @summary Get current user
 */
export const getCurrentUser = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetUserResponse>({ url: `/api/users/me`, method: "GET" }, options);
};

export const getAllUsersBySchemeId = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetUsersPermissionsResponse[]>({ url: `/api/schemes/${id}/users`, method: "GET" }, options);
};

export type GetSchemeByIdResult = NonNullable<Awaited<ReturnType<typeof getSchemeById>>>;
export type UpdateSchemeResult = NonNullable<Awaited<ReturnType<typeof updateScheme>>>;
export type DeleteSchemeByIdResult = NonNullable<Awaited<ReturnType<typeof deleteSchemeById>>>;
export type GetAllUsersPermissionsBySchemeIdResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsersPermissionsBySchemeId>>
>;
export type SetPermissionsByIdSchemeResult = NonNullable<Awaited<ReturnType<typeof setPermissionsByIdScheme>>>;
export type DeletePermissionsByIdSchemeResult = NonNullable<Awaited<ReturnType<typeof deletePermissionsByIdScheme>>>;
export type GetAllSchemesResult = NonNullable<Awaited<ReturnType<typeof getAllSchemes>>>;
export type CreateNewSchemeResult = NonNullable<Awaited<ReturnType<typeof createNewScheme>>>;
export type RegisterResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type RegisterAdminResult = NonNullable<Awaited<ReturnType<typeof registerAdmin>>>;
export type RefreshResult = NonNullable<Awaited<ReturnType<typeof refresh>>>;
export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type GetUserByIdResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>;
export type GetCurrentUserResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetAllUsersBySchemeIdResult = NonNullable<Awaited<ReturnType<typeof getAllUsersBySchemeId>>>;
