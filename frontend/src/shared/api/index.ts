/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Physics circuits simulation Engine
 * Sample API of the Physics project engine
 * OpenAPI spec version: 1.0.0
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import type { GetUserResponse, JwtResponse, SignInRequest, SignUpAdminRequest, SignUpRequest } from "./index.schemas";

/**
 * Registers a new user with provided details and generates JWT token
 * @summary User registration
 */
export const register = <TData = AxiosResponse<JwtResponse>>(
  signUpRequest: SignUpRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/auth/register`, signUpRequest, options);
};

/**
 * Registers a new administrator with provided details and admin key, and generates JWT token
 * @summary Admin registration
 */
export const registerAdmin = <TData = AxiosResponse<JwtResponse>>(
  signUpAdminRequest: SignUpAdminRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/auth/register/admin`, signUpAdminRequest, options);
};

/**
 * Refreshes JWT token based on provided refresh token
 * @summary Refresh token
 */
export const refresh = <TData = AxiosResponse<JwtResponse>>(
  refreshBody: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/auth/refresh`, refreshBody, options);
};

/**
 * Authenticates user based on provided credentials and generates JWT token
 * @summary User login
 */
export const login = <TData = AxiosResponse<JwtResponse>>(
  signInRequest: SignInRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/api/auth/login`, signInRequest, options);
};

/**
 * Retrieves user information by their ID
 * @summary Get user by ID
 */
export const getUserById = <TData = AxiosResponse<GetUserResponse>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/users/${id}`, options);
};

/**
 * Retrieves information about the current user based on the email stored in the JWT payload
 * @summary Get current user
 */
export const getCurrentUser = <TData = AxiosResponse<GetUserResponse>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/api/users/me`, options);
};

export type RegisterResult = AxiosResponse<JwtResponse>;
export type RegisterAdminResult = AxiosResponse<JwtResponse>;
export type RefreshResult = AxiosResponse<JwtResponse>;
export type LoginResult = AxiosResponse<JwtResponse>;
export type GetUserByIdResult = AxiosResponse<GetUserResponse>;
export type GetCurrentUserResult = AxiosResponse<GetUserResponse>;
